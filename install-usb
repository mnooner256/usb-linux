#!/bin/bash -e

#This variable sets what we will install the system onto
BUILD=''

#Help message
usage="
You must pass in the path to an unmounted block device or an iso file name.
example: $0 /dev/sdc
example: $0 ./install.iso
"

#This is the location where the system to automatically download
#the install script
export HTTP_CLIENT_SCRIPT='http://sun1.cs.uca.edu:7000/sh/client-install.sh'

#These are extra packages that make using the USB far
#easier. It should include all the packages needed to install
#any desired OS from $HTTP_CLIENT_SCRIPT
#Note: software-properties-common adds the ability to use
#add-apt-repository needed for some software installs
export EXTRAS='xorg lxde-common lxterminal iceweasel lxtask ntfs-3g    \
               network-manager build-essential libxml2-dev ntfs-3g-dev \
               pkg-config libfuse-dev libattr1-dev libssl-dev attr     \
               p7zip-full unzip unrar chntpw software-properties-common'


#This variable sets where the initial system files will be temporarily
#installed
export CHROOT='/media/chroot'

#This variable sets a directory that will temporarily hold the ISO system
#just before the file is built.
export ISO_BUILD='/media/iso'

#This variable sets the location of the default files directory which
#holds settings files for the new system. It is set relative to the
#directory containing this script.
export DEFFILES='def-files'

#This should be the architecture the new system
export ARCH='amd64'

#The Ubuntu "code name" to use for setting up apt (leave it as is)
export CODE_NAME='saucy'

#The URL of the mirror to use for fetching the initial system files and for
#apt to use when installing packages
export MIRROR='http://archive.ubuntu.com/ubuntu'

#This URL is the mirror that hosts the security updates
export SEC_MIRROR="${MIRROR/archive/security}"

#This is the package name for the kernel the system will use
export KERNEL="linux-image-generic"

#This is the package name for the above kernel's header files
export HEADERS="$(echo $KERNEL | sed 's/image/headers/')"


#This function displays information messages using a green font.
#param: The message to display.
#usage: info "This is some information"
function info {
    echo -e "\033[1;32m$@\033[0;49m"
}

#This function displays warnings in a yellow font.
#param: The message to display.
#usage: warn "This is a warning"
function warn {
    echo -e "\033[1;33mWARNING: $@\033[0;49m"
}

#This function is used to cleanly exit the script. It does this by unmounting
#all devices, displaying a given error message, and exiting with an error
#code.
#param: The error message to display.
#usage: die "This is an error"
function error_exit {
    unmount_all

    #Create the line of asterisks
    stars=$( printf '%0.1s' "*"{1..75} )

    printf "\n\033[1;31m$stars\n\n"

    #Print out message, limit the line length to 70 chars
    echo -e "$@" | fold -s -w 70

    printf "\n$stars\033[0;49m\n"
    exit 1
}

#Trap the killer signals so that we can exit with a good message
trap "error_exit 'Received signal SIGHUP, exiting.'" SIGHUP
trap "error_exit 'Received signal SIGINT, exiting.'" SIGINT
trap "error_exit 'Received signal SIGTERM, exiting.'" SIGTERM

#Alias the function so that it will print a message with the following format:
#prog-name(@line#): message
#We have to explicitly allow aliases, we do this because they make calling the
#function much easier (see example)
shopt -s expand_aliases
alias die='error_exit "Error ${0}(@`echo $(( $LINENO - 1 ))`):"'

#This function checks that a given device or path is mounted, and if the
#parameter is, this function then unmounts it.
#param: A mount point or device file
#usage: unmount /some/directory
function unmount {
    if grep -q $1 /etc/mtab ; then
        if ! umount -v -f $1 ; then
            warn "Failed to unmount $1, trying last resort unmount"
            #Try lazy unmounting as a last resort
            if ! umount -v -l $1 ; then
                warn "Failed to unmount $1!"
            else
                warn "Lazy unmounted $1"
            fi
        else
            info "Unmounted $1"
        fi
    else
        info "$1 is not mounted"
    fi
}

#This function unmounts all the mount-points created in this script.
#It is used to clean-up at the end or after an error occurs. This
#function does not check "devices" it instead calls the unmount
#function using mount points.
function unmount_all {
    unmount $CHROOT/tmp
    unmount $CHROOT/dev/pts
    unmount $CHROOT/dev
    unmount $CHROOT/sys
    unmount $CHROOT/proc

    if [[ ! -z "$MNT" ]] ; then
        unmount "$MNT"
        rmdir -v "$MNT" #MNT is a mktemp directory so get rid of it
    fi
}

function mount_all {

    info "Mounting the needed directories under $CHROOT"
    if ! (mount -vt proc proc "$CHROOT/proc"    &&
          mount -vt tmpfs tmpfs "$CHROOT/tmp"   &&
          mount -v --rbind /sys "$CHROOT/sys"   &&
          mount -v --rbind /dev "$CHROOT/dev"   &&
          mount -v --rbind /dev/pts "$CHROOT/dev/pts") ; then
        die 'A mount failed!'
    fi
}



#See if we are the root user
if [[ "$UID" != "0" ]] ; then
    die 'This script can only be run as root'
fi

#Make sure a parameter was passed in
if [[ -z "$1" ]] ; then
    echo "$usage"
    exit 2

#See if the parameter is a block device
elif [[ -b "$1" ]] ; then
    #Be cautious do not use mounted block files
    if grep -q "$1" /proc/mounts ; then
        die "The device is mounted, will not continue\n\n$usage"

    #Make sure the file is a device not a partition
    elif [ ! -e /sys/block/$( basename $1 ) ]; then
        echo /sys/block/$( basename $1 )
        die "Use a device, not a partition\n\n$usage"

    #Make sure the device file is a USB device
    #i.e. not a hard drive!
    elif ! readlink -e /sys/block/$(basename $1) | grep -q usb ; then
        die "$1 is not a USB based block device"
    fi

    #Set the build mode
    BUILD="device"

    #This is the physical device we will install the system on
    DEV="$1"

    #This will be the partition we will install the system on
    USB="${DEV}1"

    info "Will create the system on the device: $DEV"

    info "Clearing ${DEV}'s partition table"
    if ! parted -a optimal -s "$DEV" mktable msdos ; then
      die "Could not repartition $DEV"
    fi

    info "Creating the $USB partition"
    if ! parted -s -a optimal "$DEV" mkpart primary 0% 100% ; then
        die "Could not create the partition"
    elif ! parted -s "$DEV" set 1 boot on ; then
        die "Could not make the partition bootable."
    fi

    info "Formating and tuning ${USB}'s filesystem"
    if ! (mkfs.ext3 -L 'Installer' "$USB" && tune2fs -c 0 -i 0 $USB) ; then
       die 'Could not format partition'
    fi

#See if the argument ends in .iso, if not then it is an error
elif [[ "${1: -4}" != ".iso" ]] ; then
    die "The passed in parameter is neither a block device or an ISO file\n\n$usage"

#Build an ISO file
else
    #Set the build mode
    BUILD="iso"

    #Make sure that the directories in the path exist
    if [ ! -d "$(dirname "$1")" ] ; then
        die "The path $(dirname "$1") does not exist"
    fi

    #This is the final location for the ISO file
    ISO="$(readlink -f "$1")"

    info "Will build the iso file: $ISO"

    #Make sure the mkisofs program is available so we can create the ISO file
    if ! which mkisofs > /dev/null ; then
        warn "The mkisofs program is not installed, installing it..."
        if ! apt-get install -y genisoimage ; then
            die "Could not install the genisoimage package (to get mkisofs)"
        fi
    fi

    #Clear out the ISO build directory if it exists
    if [[ -e "$ISO_BUILD" ]] ; then
        info "Removing old ISO build directory"
        rm -rf "$ISO_BUILD"
    fi
fi


info "Checking that the main apt mirror is working (timeout 30s)"
if ! wget -q --timeout=30 "$MIRROR" -O /dev/null ; then
    die "The mirror $MIRROR appears to be down or invalid"
else
    info "Apt mirror is working"
fi

info "Checking the security updates mirror is working (timeout 30s)"
if ! wget -q --timeout=30 "$SEC_MIRROR" -O /dev/null ; then
    die "The mirror $SEC_MIRROR appears to be down or invalid"
else
    info "Security mirror is working"
fi

#Change the DEFFILES variable to an absolute directory
export DEFFILES="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)/$DEFFILES"
if [[ ! -d $DEFFILES ]] ; then
    die "The $DEFFILES directory does not exist, try changing the configuration value at the top of the script."
else
    info "Will look for files in $DEFFILES"
fi

#DEBUG
skip() {

info "Unmounting pseudo-filesystems if they are mounted from previous attempt"
unmount_all

#If the $CHROOT directory exits, destroy it so we have a clean slate.
if [ -d $CHROOT ] ; then
    info "Clearing $CHROOT for a clean slate ..."
    if ! rm -rf "$CHROOT" ; then
        die "Could not remove the directory"
    fi
fi

info "Creating the $CHROOT directory"
if ! mkdir -p "$CHROOT" ; then
    die "Could not create the chroot directory at $CHROOT"
fi

#This program creates a minimal linux system
if [ ! -f /usr/sbin/debootstrap ] ; then
    warn "Installing deboostrap so we can create a minimal system"
    if ! apt-get -y install debootstrap ; then
        die "Could not install debootstrap"
    fi
fi

#Syslinux is going to be the boot loader, make sure it is available
if [ ! -e /usr/lib/syslinux/isolinux.bin ] ; then
    warn "The syslinux package is not installed, installing it..."
    if ! apt-get -y install syslinux; then
        die "Could not install the syslinux package"
    fi
fi

#Extlinux is the boot loader for USB installs
if ! which extlinux > /dev/null ; then
    warn "The extlinux package is not installed, installing it..."
    if ! apt-get -y install extlinux; then
        die "Could not install the extlinux package"
    fi
fi

info 'Bootstrapping in a basic system'
if ! /usr/sbin/debootstrap --arch "$ARCH" "$CODE_NAME" "$CHROOT" "$MIRROR" ; then
    die 'Failed to bootstrap'
fi

#Copy the timezone info from the system to the new USB drive
if ! cp /etc/timezone "$CHROOT/etc/timezone" ; then
    die 'Failed to update the /etc/timezone file'
fi

#Set some important networking configuration files
info "Set $CHROOT/etc/hostname"
HOST="usb"
if ! echo -n $HOST > $CHROOT/etc/hostname ; then
    die "Failed to update the /etc/hostname file"
fi

if ! echo "127.0.0.1 localhost $HOST" > $CHROOT/etc/hosts ; then
    die 'Failed to create the /etc/hosts file'
fi

info 'Creating the sources.list file for apt'
cat >$CHROOT/etc/apt/sources.list  <<EOF

deb $MIRROR ${CODE_NAME} main restricted universe multiverse
deb $SEC_MIRROR ${CODE_NAME}-security main restricted universe multiverse
EOF

if [[ ! -e $CHROOT/etc/apt/sources.list ]] ; then
    die "Failed to create $CHROOT/etc/apt/sources.list file"
fi

info "Copying over needed files from $DEFFILES"
if ! cp -v $DEFFILES/fstab $CHROOT/etc/fstab ; then
    die "Failed to create $CHROOT/etc/fstab file"
elif ! cp -v $DEFFILES/kernel-img.conf $CHROOT/etc/kernel-img.conf ; then
    die "Failed to copy the $CHROOT/etc/kernel-img.conf file"
elif ! cp -v $DEFFILES/vimrc $CHROOT/root/.vimrc ; then
    die "Failed to copy the $CHROOT/root/.vimrc file"
elif ! cp $CHROOT/root/.vimrc $CHROOT/etc/skel/ ; then
    die "Failed to copy the .vimrc file to $CHROOT/etc/skel"
elif ! cp -v $DEFFILES/preselects $CHROOT/root/conf ; then
    die "Failed to copy the pre-selections file."
fi

info "Installing root's bashrc file"
if ! sed "s|HTTP_CLIENT_SCRIPT|$HTTP_CLIENT_SCRIPT|" \
       $DEFFILES/bashrc > $CHROOT/root/.bashrc ; then
    die "Could not install the bashrc file"

#Double check sed worked correctly
elif ! grep -q "$HTTP_CLIENT_SCRIPT" $CHROOT/root/.bashrc ; then
    die "Failed to add the mirror \"$HTTP_CLIENT_SCRIPT\" to the bashrc script"
fi

info 'Creating an installer script for chroot'
if ! cat > $CHROOT/chroot-install <<EOF
#!/bin/bash -e

function info {
    echo -e "\033[1;34m\$@\033[0;49m"
}

function die {
    echo -e "\n\033[1;31m\$@\033[0;49m"
    umount -lv /proc /sys /tmp /dev;
    exit 128
}

#Unmount the directories when exiting out
trap "{ umount -lv /proc /sys /tmp /dev; exit 255 }" SIGINT SIGTERM

info "Beginning chroot install"

info "Setting local time"
ln -svf /usr/share/zoneinfo/US/Central /etc/localtime

info 'Setting up the root user'
groupadd admin
usermod -a -G 'users,plugdev,audio,cdrom,admin,disk' root
passwd -d root #Make root have no password

info 'Preseeding for apt'
if ! debconf-set-selections /root/conf && rm -v /root/conf ; then
    die "Failed to preseed apt"
fi

#export DEBIAN_FRONTEND=noninteractive

apt-get clean
apt-get update || apt-get update

#Note lilo was added because otherwise the kernel will install grub2
#automatically
if ! apt-get -y install $KERNEL $HEADERS dhcpcd squashfs-tools  \
                        dialog mingetty vim-nox wget jfsutils \
                        parted gpm laptop-detect debootstrap less  \
                        initramfs-tools live-boot language-pack-en-base \
                        dkms virtualbox-guest-utils \
                        debconf-utils lilo $EXTRAS ; then
    die "Failed to install all of the required software"
fi

info "Installing extra repos"
#if ! wget -q http://download.virtualbox.org/virtualbox/debian/oracle_vbox.asc -O- | apt-key add - ; then
#    die "Failed to add the virtualbox repository"
if ! add-apt-repository -y ppa:nilarimogard/webupd8 ; then
    die "Failed to add the WIM tools repositiory"
fi

info "Updating apt's repo list"
if ! apt-get update ; then
    die "Failed to update apt's repos list after additions"
fi

#Try installing Virtualbox's Guest additions in case
#we use the system in a VM
#if ! apt-get -y install virtualbox-guest-utils ; then
#    die "Failed to install virtualbox's guest utils"
#fi

#Try installing the WIM tools
info "Installing WIM tools"
if ! apt-get -y install wimtools ; then
    die "Failed to install WIM tools"
fi

info "Updating the system"
apt-get -y dist-upgrade && apt-get -y autoremove

info "Cleaning up after apt"
apt-get -y clean

#Force a black listing of the old pc-speaker driver
echo blacklist snd-pcsp >> /etc/modprobe.d/blacklist.conf

info Fixing sudoers file
if ! cp -v /etc/sudoers /tmp/sudoers.tmp ; then
    die 'Could not copy sudoers to begin no password change'
elif ! sed -i 's/^%admin.*$/%admin ALL=NOPASSWD:ALL/' /tmp/sudoers.tmp ; then
    die 'Could not replace ALL with NOPASSWD field in admin.'
elif ! sed -i 's/^%sudo.*$/%sudo ALL=NOPASSWD:ALL/' /tmp/sudoers.tmp ; then
    die 'Could not replace ALL with NOPASSWD field in sudoers.'
elif ! mv -v /tmp/sudoers.tmp /etc/sudoers ; then
    die 'Could not replace sudoers file with new one.'
fi

info "Making sure root owns everythin in /root"
chown -R root:root /root

#Make mingetty auto-login on tty1
sed 's|^exec.*$|exec /sbin/mingetty --autologin root --noclear tty1|' -i /etc/init/tty1.conf

info "Finished chroot script sucessfully"
exit 0
EOF
then
    die "Could not create the script that manages the chroot install."
fi

info "Mounting needed filesystems before chroot"
mount_all

#Make the install script executable
if ! chmod u+x $CHROOT/chroot-install ; then
    die "Could not make the chroot install script executable."
fi

info 'Performing chroot install ...'
if ! LANG=C chroot $CHROOT /chroot-install ; then
    die "Chroot install failed!"
fi

info "Unmount filesystems after chroot"
unmount_all

#For some reason the chroot changes the host environment's hostname
#value. This is to change it back.
info "Fixing host's hostname"
if ! hostname $( cat /etc/hostname ) ; then
    warn "Could not fix host environment's hostname"
fi

#Cleanup the install script
if ! rm $CHROOT/chroot-install ; then
    warn "Failed to remove the chroot-install script"
fi

info 'Setting up the defaults for the LXDE desktop'
mkdir -p "$CHROOT/etc/xdg/lxpanel/profile/LXDE/panels/" || echo 'Directory exists'
mkdir -p "$CHROOT/etc/xdg/pcmanfm/LXDE/" || echo 'Directory exists'
mkdir -p "$CHROOT/etc/xdg/pcmanfm/default/" || echo 'Directory exists'

if ! cp -v "$DEFFILES/panel" "$CHROOT/etc/xdg/lxpanel/profile/LXDE/panels/panel" ;
then
    die "Could not install the panel configuration file"
elif ! cp -v "$DEFFILES/pcmanfm.conf" "$CHROOT/etc/xdg/pcmanfm/LXDE/pcmanfm.conf" ;
then
    die "Could not install the desktop configuration file"
elif ! cp -v "$DEFFILES/pcmanfm.conf" "$CHROOT/etc/xdg/pcmanfm/default/pcmanfm.conf" ;
then
    die "Could not install the desktop configuration file to default"
fi

info 'Installing network interfaces file'
if ! cp -v "$DEFFILES/interfaces" "$CHROOT/etc/network/interfaces" ; then
    die "Could not install the interfaces file"
fi

#udev is attached to *this* machine's network card now.
#Get rid of this rule to make udev think it is a brand new install
info 'Fixing udev network card rules'
if [ -e /media/chroot/etc/udev/rules.d/70-persistent-net.rules ] && \
     ! rm /media/chroot/etc/udev/rules.d/70-persistent-net.rules ; then
    warn "Could not fix network card udev rules"
fi

#We will shrink the size of the ISO by zeroing out documentation
#and log files.
info 'Discovering what files to zero out...'
if ! (find $CHROOT/usr/share/doc -type f -size +1b > /tmp/commit_zerosize   &&
      find $CHROOT/usr/share/man -type f -size +1b >> /tmp/commit_zerosize  &&
      find $CHROOT/usr/share/info -type f -size +1b >> /tmp/commit_zerosize &&
      find $CHROOT/var/log -type f -size +1b >> /tmp/commit_zerosize  ) ; then
    die "Could not find files to zero out"
fi

info 'Making the man, doc, and info files have zero size ...'
NFILES="$(wc -l /tmp/commit_zerosize | awk '{ print $1 }')"
i=1
cat /tmp/commit_zerosize | while read file ; do
    echo -n -e "\tZeroing $i/$NFILES files\r"
    rm $file
    touch $file
    i=$[i + 1]
done ; echo

#Get rid of any left over deb files to further reduce the ISO size
info 'Getting rid of any left over deb files'
rm -rf $CHROOT/var/cache/apt/archives/*

info "Creating the root user's Desktop directory"
if [ ! -d "$CHROOT/root/Desktop" ] ; then
    mkdir "$CHROOT/root/Desktop"
fi

#DEBUG
}

#Tell squashfs not to include these files or directories
info 'Creating directory-exclusion file'
if ! cp -v "$DEFFILES/exclude" "$CHROOT/tmp/exclude" ; then
    die 'Could not install the squashfs exclusion file'
fi

info 'Creating the file system file.'
if ! chroot "$CHROOT" /usr/bin/mksquashfs / /filesystem.squashfs -noappend -always-use-fragments -wildcards -ef /tmp/exclude -processors 4; then
    die "Failed to squash the file system."
fi


#This gets everything after vmlinuz- so we can detect the kernel
#version. This technique is brittle, so we do some error checking
#to make sure we got a proper suffix.
info "Calculating the kernel's version"
kernel_version=$( basename $CHROOT/boot/vmlinuz* |  sed 's|.*vmlinuz-\(.*$\)|\1|' )

if [[ -z "$kernel_version" ]] ; then
    die "Could not determine the kernel version number"
elif [[ ! -f "$CHROOT/boot/vmlinuz-${kernel_version}" ]] ; then
    die "The kernel version \"$kernel_version\" is not a valid kernel suffix"
else
    info "Found the kernel version: $kernel_version"
fi

if [[ "iso" == $BUILD ]] ; then
    ##########################################################################
    #
    # Create ISO Image File
    #
    ##########################################################################
    info "Creating directories for the ISO image."
    if ! mkdir -pv "$ISO_BUILD"/{isolinux,live,boot} ; then
        die "Could not create directories for ISO filesystem at $ISO_BUILD"
    fi

    info "Installing $ISO files for booting"
    if ! cp -v "$CHROOT/filesystem.squashfs" "$ISO_BUILD/live/" ; then
        die "Could not copy the filesystem.squashfs file to the CD."
    elif ! cp -vR "$CHROOT/boot" "$ISO_BUILD/" ; then
        die "Could not copy the boot directory."
    fi

    #Install the boot loader
    info 'Installing the bootloader files'
    if ! cp -v /usr/lib/syslinux/isolinux.bin "$ISO_BUILD/isolinux" ; then
        die "Could not install the isolinux bootloader"
    fi

    #mkisofs borks file names with hyphens, it silently changes them to
    #underscore characters. We have to take this into account below.
    #That is the reason for the sed pipeline in this config file.
    info "Creating the isolinux configuration file"
    pushd $CHROOT > /dev/null

    kernel_version=$(echo $kernel_version | sed -e 's|-|_|g')

    info "Install the isolinux.cfg file"
    if ! cp -v "$DEFFILES/isolinux.cfg" "$ISO_BUILD/isolinux/isolinux.cfg" ; then
        die "Could not install the boot loader configuration file"
    fi

    if ! sed -i -e "s|version|$kernel_version|" "$ISO_BUILD/isolinux/isolinux.cfg" ; then
        die "Could not make the isolinux.cfg file kernel version specific"
    fi

    ISOTMP="$(dirname $ISO)/temp-$(basename $ISO)"
    info "Creating the iso file $ISOTMP"
    if mkisofs -o "$ISOTMP" -allow-multidot \
          -l -b isolinux/isolinux.bin -c isolinux/boot.cat \
          -no-emul-boot -boot-load-size 4 -boot-info-table \
          "$ISO_BUILD" ; then
        info "Created the ISO file"
    else
        die "Failed to create the ISO file"
    fi

    info "Installing ISO at the final location"
    mv -v "$ISOTMP" "$ISO"

    info 'Installation Finished Successfully!!!'
    info "ISO file $ISO"
    echo
    exit 0
else
    ##########################################################################
    #
    # Install On USB Drive
    #
    ##########################################################################

    #This is where we are going to mount $USB
    MNT=$(mktemp -d)

    info "Mounting needed filesystems"
    mount_all

    info "Mounting $USB at $MNT"
    if ! mount -v -t ext3 $USB $MNT ; then
        die "Failed to mount $USB at $MNT"
    fi

    info "Creating the USB's root file structure"
    if ! mkdir -v $MNT/{boot,live} ; then
        die "Could not create needed directories on $MNT"
    fi

    info "Installing $USB files for booting"
    if ! cp -v "$CHROOT/filesystem.squashfs" "$MNT/live/" ; then
        die "Could not copy the filesystem.squashfs file to the CD."
    elif ! cp -vR "$CHROOT/boot" "$MNT" ; then
        die "Could not copy the boot directory."
    fi

    #Install the boot loader's configuration file
    info "Inserting the kernel version into the extlinux.conf file"
    if ! sed "s|version|$kernel_version|" "$DEFFILES/extlinux.conf" > "$MNT/extlinux.conf" ; then
        die "Could not copy the boot loader configuration file"
    fi

    info 'Installing extlinux bootloader'
    if ! extlinux --install $MNT 2> /dev/null ; then
        die 'Clould not install extlinux'
    fi

    info 'Cleanly unmounting everything before finishing'
    unmount_all

    info "Installing extlinux MBR on $DEV"
    if ! dd if=/usr/lib/syslinux/mbr.bin of=$DEV ; then
        die 'Could not install MBR'
    fi

    echo
    echo 'Installation Finished Successfully !!!'
    echo
fi
